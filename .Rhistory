missClass = function(values, prediction){sum(((prediction > 0.5) * 1) != values) / length(values)}
missclass(trainsSA$chd, predict(modelSA,newdata=trainSA))
missClass(trainsSA$chd, predict(modelSA,newdata=trainSA))
missClass(trainSA$chd, predict(modelSA,newdata=trainSA))
missClass(testSA$chd, predict(modelSA,newdata=testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$fy =as.factor(vowel.test$y)
vowel.train$fy =as.factor(vowel.train$y)
View(vowel.test)
install.packages("randomForest")
library(randomForest)
model = randomForest(fy ~., data=vowel.train)
varImp(model)
library(ggplot2);library(caret);library(dplyr)
if (!file.exists("./data/training.csv")) {
download.file(
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"./data/training.csv"
)
data <-
read.csv(
"./data/training.csv",
na.strings = c("NA", "#DIV/0!", "")
)
}
if (!file.exists("./data/testing.csv")) {
download.file(
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
"./data/testing.csv"
)
test <-
read.csv(
"./data/testing.csv",
na.strings = c("NA", "#DIV/0!", "")
)
}
library(ggplot2);library(caret);library(dplyr)
library(ggplot2);library(caret);library(dplyr)
if (!file.exists("./data/training.csv")) {
download.file(
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"./data/training.csv"
)
data <-
read.csv(
"./data/training.csv",
na.strings = c("NA", "#DIV/0!", "")
)
}
if (!file.exists("./data/testing.csv")) {
download.file(
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
"./data/testing.csv"
)
test <-
read.csv(
"./data/testing.csv",
na.strings = c("NA", "#DIV/0!", "")
)
}
set.seed(9125)
inTrain <- createDataPartition(y = data$classe, p = .6, list = F)
data$classe
data
train
dim(train)
if (!file.exists("./data/training.csv")) {
download.file(
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"./data/training.csv"
)
}
train <-
read.csv("./data/training.csv",
na.strings = c("NA", "#DIV/0!", ""))
if (!file.exists("./data/testing.csv")) {
download.file(
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
"./data/testing.csv"
)
}
test <-
read.csv("./data/testing.csv",
na.strings = c("NA", "#DIV/0!", "")
)
set.seed(9125)
inTrain <- createDataPartition(y = train$classe, p = .6, list = F)
training <- train[inTrain,]
validation <- train[-inTrain,]
str(training)
dim(training)
dim(validation)
nsv <- nearZeroVar(training, saveMetrics=TRUE)
nsv
subset(nsv, nzv==TRUE)
subset(nsv, nzv==TRUE || zeroVar==TRUE)
subset(nsv, nzv==TRUE | zeroVar==TRUE)
subset(nsv, nzv==TRUE | zeroVar==TRUE)[1,]
subset(nsv, nzv==TRUE | zeroVar==TRUE)[,1]
subset(nsv, nzv==TRUE | zeroVar==TRUE)
nsv <- nearZeroVar(training, saveMetrics=TRUE)
training <- training[, nsv$zeroVar ==F & nsv$nzv==F]
validation <- validation[, nsv$zeroVar ==F & nsv$nzv==F]
View(nsv)
nsv <- nearZeroVar(training, saveMetrics = TRUE)
training <- training[, -nsv]
nsv <- nearZeroVar(training)
training <- training[, -nsv]
validation <- validation[, -nsv]
nsv
nsv <- nearZeroVar(training, saveMetrics = TRUE)
training <- training[, -nsv]
nsv <- nearZeroVar(training, saveMetrics = TRUE)
training <- training[, -nsv]
View(nsv)
nsv <- nearZeroVar(training, saveMetrics = TRUE)
training <- training[, -nsv]
set.seed(9125)
inTrain <- createDataPartition(y = train$classe, p = .6, list = F)
training <- train[inTrain,]
validation <- train[-inTrain,]
str(training)
dim(training)
dim(validation)
nsv <- nearZeroVar(training, saveMetrics = TRUE)
View(nsv)
nsv <- nearZeroVar(training)
training <- training[, -nsv]
nsv <- nearZeroVar(training, saveMetrics = TRUE)
nsv <- nearZeroVar(training)
training <- training[, -nsv]
validation <- validation[, -nsv]
set.seed(9125)
inTrain <- createDataPartition(y = train$classe, p = .6, list = F)
training <- train[inTrain,]
validation <- train[-inTrain,]
str(training)
dim(training)
dim(validation)
nsv <- nearZeroVar(training)
training <- training[, -nsv]
validation <- validation[, -nsv]
rNas <- colMeans(is.na(training))
rNas
rNas <- rNas[,rNas > .75]
rNas <- rNas[rNas > .75]
training[,rNas[rNas > .75]]
training[,rNas[rNas < .75]]
training
dim(training)
rNas[rNas < .95]
rNas[rNas < .75]
rNas <- colMeans(is.na(training))
training[,rNas[rNas < .75]]
rNas[rNas < .75]
training[,rNas[rNas < .75]]
dim(training)
dim(rNas)
training[,rNas[rNas < 0.75]]
training[,rNas < 0.75]
dim(training[,rNas < 0.75])
rNas <- colMeans(is.na(training))
training<- training [,rNas < .75]
validation <- validation[,rNas < .75]
dim(training)
dim(validation)
View(training)
treeModel <- train (classe ~., data=training, method="rpart")
predTree <- predict(treeModel, newdata=validation, type="class")
treeModel <- train (classe ~., data=training, method="rpart")
treeModel <- train (classe ~., data=training, method="rpart")
predTree <- predict(treeModel, newdata=validation)
confusionMatrix(predTree,validation$classe )
training <- preProcess(training[,-c(1:5)],method="knnImpute")
validation <- preProcess(validation[,-c(1:5)],method="knnImpute")
rNas <- colMeans(is.na(training))
set.seed(9125)
inTrain <- createDataPartition(y = train$classe, p = .6, list = F)
training <- train[inTrain,]
validation <- train[-inTrain,]
str(training)
dim(training)
dim(validation)
nsv <- nearZeroVar(training)
training <- training[, -nsv]
validation <- validation[, -nsv]
rNas <- colMeans(is.na(training))
training<- training [,rNas < .75 | -c (1:5)]
validation <- validation[,rNas < .75]
dim(training)
dim(validation)
nsv <- nearZeroVar(training)
training <- training[, -c(nsv,c(1:5))]
validation <- validation[, -c(nsv,c(1:5))]
rNas <- colMeans(is.na(training))
training<- training [,rNas < .75 ]
validation <- validation[,rNas < .75]
rNas <- colMeans(is.na(training))
training<- training [,rNas < .75 ]
validation <- validation[,rNas < .75]
dim(training)
dim(validation)
treeModel <- train (classe ~ ., data = training, method = "rpart")
predTree <- predict(treeModel, newdata = validation)
confusionMatrix(predTree, validation$classe)
library(ggplot2);library(caret);library(dplyr);libray(rpart)
library(ggplot2);library(caret);library(dplyr);library(rpart)
treeModel <- rpart(classe ~., data=training)
predTree <- predict(treeModel, newdata = validation)
confusionMatrix(predTree, validation$classe)
treeModel <- rpart(classe ~., data=training, method = "class")
predTree <- predict(treeModel, newdata = validation)
confusionMatrix(predTree, validation$classe)
treeModel <- rpart(classe ~ ., data=training, method="class")
predTree <- predict(treeModel, newdata = validation)
confusionMatrix(predTree, validation$classe)
View(training)
treeModel <- rpart(classe ~ ., data=training, method="class")
predTree <- predict(treeModel, newdata = validation, type="class")
confusionMatrix(predTree, validation$classe)
library(ggplot2);library(caret);library(dplyr);library(rpart);library(rpart.plot)
treeModel <- rpart(classe ~ ., data=training, method="class")
fancyRpartPlot(treeModel)
library(ggplot2);library(caret);library(dplyr);library(rpart);library(rattle)
treeModel <- rpart(classe ~ ., data=training, method="class")
fancyRpartPlot(treeModel)
predTree <- predict(treeModel, newdata = validation, type="class")
confusionMatrix(predTree, validation$classe)
rfModel <- train(classe ~ ., data=training, method="RF")
rfModel <- train(classe ~ ., data=training, method="rf")
library(ggplot2);library(caret);library(dplyr);library(rpart);library(rattle);
library(randomForest)
#rfModel <- train(classe ~ ., data=training, method="rf")
rfModel <- randomForest(classe~.,data=training)
#rfModel <- train(classe ~ ., data=training, method="rf")
rfModel <- randomForest(classe~.,data=training)
predRF <- predict(rfModel, newdata = validation, type="class")
confusionMatrix(predRF, validation$classe)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
rfModel <- randomForest(classe~.,data=training, trControl=trctrl)
predRF <- predict(rfModel, newdata = validation, type="class")
confusionMatrix(predRF, validation$classe)
svmModel <- train(classe~.,data=training, trControl=trctrl, method="SVMLinear")
svmModel <- train(classe~.,data=training, trControl=trctrl, method="svmLinear")
predSVM <- predict(rfModel, newdata = validation, type="class")
confusionMatrix(predSVM, validation$classe)
View(rfModel)
library(ggplot2);library(caret);library(dplyr);library(rpart);library(rattle);
library(randomForest)
plot(training$classe, rfModel$predicted)
plot(training$classe~rfModel$predicted)
qplot(training$classe~rfModel$predicted)
qplot(x=training$classe,y=rfModel$predicted)
qplot(preSVM,classe, data=validation)
qplot(predSVM,classe, data=validation)
qqplot(predSVM)
plot(predSVM)
plot(predSVM, validation$classe)
trctrl2 <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
svmModel <- train(classe~.,data=training, trControl=trctrl2, method="svmLinear")
predSVM <- predict(rfModel, newdata = validation, type="class")
confusionMatrix(predSVM, validation$classe)
test <- test[, -c(nsv,c(1:5))]
test <- test[,rNas < .75]
predTree <- predict(treeModel, newdata = validation, type="class")
confusionMatrix(predTree, validation$classe)
predRF <- predict(rfModel, newdata = validation, type="class")
confusionMatrix(predRF, validation$classe)
predSVM <- predict(rfModel, newdata = validation, type="class")
confusionMatrix(predSVM, validation$classe)
predSVM <- predict(svmModel, newdata = validation, type="class")
predSVM <- predict(svmModel, newdata = validation)
confusionMatrix(predSVM, validation$classe)
results <- resamples(list(model=rfModel,treeModel, svmModel))
results <- resamples(list(model=rfModel, svmModel))
results <- resamples(list(model=rfModel, treeModel))
results <- resamples(list(rf=rfModel, treeModel))
trctrl2 <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
gbmModel <- train(classe~.,data=training, trControl=trctrl2, method="gbm")
predGBM <- predict(gbmModel, newdata = validation)
confusionMatrix(predGBM, validation$classe)
trctrl2 <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
gbmModel <- train(classe~.,data=training, trControl=trctrl2, method="lgbm")
trctrl2 <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
gbmModel <- train(classe~.,data=training, trControl=trctrl2, method=caretModel.LGBM())
library(ggplot2);library(caret);library(dplyr);library(rpart);library(rattle);
library(randomForest);require(RLightGBM)
install.packages("rlightgbm")
install.packages("lightgbm")
MDSplot(rfModel, validation$classe)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
rfModel <- randomForest(classe~.,data=training, trControl=trctrl, proximity=T)
predRF <- predict(rfModel, newdata = validation, type="class")
confusionMatrix(predRF, validation$classe)
MDSplot(rfModel, validation$classe)
MDSplot(rfModel, validation$classe)
library(ggplot2);library(caret);library(dplyr);library(rpart);library(rattle);
library(randomForest);
MDSplot(rfModel, validation$classe)
MDSplot(rfModel, validation$classe, k=2)
library(ggplot2);library(caret);library(dplyr);library(rpart);library(rattle);
library(randomForest);library(gbm)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
plot(M)
#print(M,"chart")
library(googleVis)
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
plot(M)
#print(M,"chart")
library(googleVis)
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
plot(M)
print(M,"chart")
library(googleVis)
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
plot(M)
print(M,"chart")
G2 <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400,region="150"))
print(G2,"chart")
G2 <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400,region="150"))
plot(G2)
print(G2,"chart")
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
plot(G)
print(G,"chart")
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
plot(Line)
print(Line,"chart")
plot(GTM)
G <- gvisGeoChart(Exports, "Country", "Profit",options=list(width=200, height=100))
T1 <- gvisTable(Exports,options=list(width=200, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=370))
GT <- gvisMerge(G,T1, horizontal=FALSE)
GTM <- gvisMerge(GT, M, horizontal=TRUE,tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
plot(GTM)
print(GTM,"chart")
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=600, height=400))
plot(M)
print(M)
print(M, 'chart', file='myfilename.html')
install.packages("plotly")
library(plotly)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter")
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", color = ~factor(cyl))
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", color = ~disp)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter",
color = ~factor(cyl), size = ~hp)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter",
color = ~factor(cyl), size = ~hp, mode="none")
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter",
color = ~factor(cyl), size = ~hp, mode="markers")
set.seed(2016-07-21)
temp <- rnorm(100, mean = 30, sd = 5)
pressue <- rnorm(100)
dtime <- 1:100
plot_ly(x = ~temp, y = ~pressue, z = ~dtime,
type = "scatter3d", color = ~temp)
data("airmiles")
plot_ly(x = ~time(airmiles), y = ~airmiles, type = "scatter", mode = "lines")
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
EuStockMarkets
rep(time(EuStockMarkets), 4)
plot_ly(x = ~precip, type = "histogram")
plot_ly(iris, y = ~Petal.Length, color = ~Species, type = "box")
terrain1 <- matrix(rnorm(100*100), nrow = 100, ncol = 100)
plot_ly(z = ~terrain1, type = "heatmap")
terrain2 <- matrix(sort(rnorm(100*100)), nrow = 100, ncol = 100)
plot_ly(z = ~terrain2, type = "surface")
# Create data frame
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
source('~/borrar.R')
setwd("~/curso r/curso 9")
knitr::opts_chunk$set(echo = FALSE);library(plotly)
plot_ly(pressure)
plot(pressure)
plot_ly(data=pressure,x=~pressure$temperature, y=~pressure)
plot_ly(data=pressure,x=~temperature, y=~pressure)
kaggle(summary(cars))
kable(summary(cars))
summary(cars)
plot_ly(data=pressure,x=~temperature, y=~pressure)
install.packages("kableExtra")
knitr::opts_chunk$set(echo = FALSE);library(plotly);library(kableExtra)
kable(head(mtcars)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
install.packages("leaflet")
library(leaflet)
myMap <- leaflet() %>% addMarkers(lat=40.45, lng=-3.89, popup = "Estoy aquí")
myMap
library(leaflet)
myMap <- leaflet() %>% addMarkers(lat=39.29, lng=76.5, popup = "Estoy aquí")
myMap
library(leaflet)
myMap <- leaflet() %>% addMarkers(lat=39.29, lng=76.5, popup = "Estoy aquí")
myMap
library(leaflet)
myMap <- leaflet() %>% addTiles() %>% addMarkers(lat=39.29, lng=76.5, popup = "Estoy aquí")
myMap
library(leaflet)
myMap <- leaflet() %>% addTiles() %>% addMarkers(lat=40.23, lng=-3.89, popup = "Estoy aquí")
myMap
setwd("~/curso r/curso 9/WEEK 2")
knitr::opts_chunk$set(echo = TRUE);library(leaflet)
if (!file.exists("./data/popfr19752010.csv")) {
download.file(
"http://freakonometrics.free.fr/popfr19752010.csv","./data/popfr19752010.csv"
)
}
popfr=read.csv("./data/popfr19752010.csv",header=TRUE)
str(popfr)
simple_popfr <- popfr[,c(5,6,7,43)]
simple_popfr <- popfr[,c(5,6,7,43)]
str(simple_popfr)
View(simple_popfr)
myMap %>% leaflet()
myMap %>% leaflet() %>% addTiles()%>% addMarkers(lat=simple_popfr$lat, lng=simple_popfr$long, popup = simple_popfr$com_nom)
simple_popfr <- subset(popfr[,c(5,6,7,43)], pop_2010 > 99999)
str(simple_popfr)
dim(simple_popfr)
simple_popfr <- subset(popfr[,c(5,6,7,43)], pop_2010 > 9999)
str(simple_popfr)
dim(simple_popfr)
simple_popfr %>% leaflet() %>% addTiles()%>% addCircles(weight = 1, radius = sqrt(simple_popfr$pop_2010) * 30)
simple_popfr %>% leaflet() %>% addTiles()%>% addCircles(weight = 1, radius = sqrt(simple_popfr$pop_2010) * 30, popup =simple_popfr$com_nom )
simple_popfr <- subset(popfr[,c(5,6,7,43)], pop_2010 > 9999)
simple_popfr$legend <- c(simple_popfr$con_name,"/n",simple_popfr$pop_2010)
v <- c(simple_popfr$con_name,"/n",simple_popfr$pop_2010)
v
simple_popfr <- subset(popfr[,c(5,6,7,43)], pop_2010 > 9999)
v <- c(as.character( simple_popfr$con_name),"/n",simple_popfr$pop_2010)
str(simple_popfr)
dim(simple_popfr)
v
if (!file.exists("./data/popfr19752010.csv")) {
download.file(
"http://freakonometrics.free.fr/popfr19752010.csv","./data/popfr19752010.csv"
)
}
popfr=read.csv("./data/popfr19752010.csv",header=TRUE, stringsAsFactors = F)
str(popfr)
simple_popfr <- subset(popfr[,c(5,6,7,43)], pop_2010 > 9999)
v <- c( simple_popfr$con_name,"/n",simple_popfr$pop_2010)
str(simple_popfr)
dim(simple_popfr)
v
simple_popfr <- subset(popfr[,c(5,6,7,43)], pop_2010 > 9999)
v <- c( simple_popfr$com_name,"/n",simple_popfr$pop_2010)
str(simple_popfr)
dim(simple_popfr)
v
simple_popfr <- subset(popfr[,c(5,6,7,43)], pop_2010 > 9999)
v <- c( simple_popfr$com_nom,"/n",simple_popfr$pop_2010)
str(simple_popfr)
dim(simple_popfr)
v
simple_popfr <- subset(popfr[,c(5,6,7,43)], pop_2010 > 9999)
v <- paste(simple_popfr$com_nom,"/n",simple_popfr$pop_2010))
v <- paste(paste(simple_popfr$com_nom,"/n"),simple_popfr$pop_2010)
v
simple_popfr <- subset(popfr[,c(5,6,7,43)], pop_2010 > 9999)
simple_popfr$popup <- paste(paste(simple_popfr$com_nom,"<br>"),simple_popfr$pop_2010)
str(simple_popfr)
dim(simple_popfr)
simple_popfr %>% leaflet() %>% addTiles()%>% addCircles(weight = 1, radius = sqrt(simple_popfr$pop_2010) * 30, popup =simple_popfr$popup )
simple_popfr %>% leaflet() %>% addTiles()%>% addCircles(weight = 1, radius = sqrt(simple_popfr$pop_2010) * 5, popup =simple_popfr$popup )
simple_popfr %>% leaflet() %>% addTiles()%>% addCircles(weight = 1, radius = sqrt(simple_popfr$pop_2010) * 7, popup =simple_popfr$popup )
